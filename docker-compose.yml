services:
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: "fluent-bit"
    volumes:
      - ./logs:/var/log/app
      - ./db:/fluent-bit/db # Persistent storage for Fluent Bit DB
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    command: ["/fluent-bit/bin/fluent-bit", "-c", "/fluent-bit/etc/fluent-bit.conf"]
    depends_on:
      timeline-service:
        condition: service_healthy
    networks:
      - twitter-network

  rabbitmq:
    container_name: "rabbitmq"
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5673:5672"
      - "15673:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - twitter-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always

  authentication-service:
    container_name: "authentication-service"
    build: 
      context: .
      dockerfile: AuthenticationService/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://authentication-service:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./logs/authentication-service:/var/log/app
    networks:
      - twitter-network
    restart: always
  
  user-management-service:
    container_name: "user-management-service"
    build:
      context: .
      dockerfile: UserManagementService/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://user-management-service:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./logs/user-management-service:/var/log/app
    networks:
      - twitter-network
    restart: always

  post-management-service:
    container_name: "post-management-service"
    build:
      context: .
      dockerfile: PostManagementService/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://post-management-service:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    volumes:
      - ./logs/post-management-service:/var/log/app
    networks:
      - twitter-network
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: always

  notification-service:
    container_name: "notification-service"
    build:
      context: .
      dockerfile: NotificationService/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://notification-service:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      rabbitmq:
        condition: service_healthy
      post-management-service:
        condition: service_healthy
    volumes:
      - ./logs/notification-service:/var/log/app
    networks:
      - twitter-network
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: always

  timeline-service:
    container_name: "timeline-service"
    build:
      context: .
      dockerfile: TimelineService/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://timeline-service:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      post-management-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    volumes:
      - ./logs/timeline-service:/var/log/app
    networks:
      - twitter-network
    restart: always

  api-gateway:
    container_name: "api-gateway"
    build: 
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-gateway:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      authentication-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      post-management-service:
        condition: service_healthy
      timeline-service:
        condition: service_healthy
    volumes:
      - ./logs/api-gateway:/var/log/app
    networks:
      - twitter-network
      - default # allows the host machine to access the api gateway
    restart: always

networks:
  twitter-network:
    name: twitter-network
    driver: bridge
    internal: true

volumes:
  rabbitmq_data:


